# GitHub Actions CI/CD Pipeline
name: CI/CD Pipeline

# Se dispara en cada push a la rama main
on:
  push:
    branches:
      - main

jobs:
  # 1. Validación de código (lint)
  lint:
    name: Lint Python
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code #clonar el repositorio en el runner
        uses: actions/checkout@v3

      - name: Setup Python #instalar Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Install flake8 #para análisis de estilo y errores
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run flake8 #correr flake8 sobre el archivo principal
        run: flake8 app.py

  # 2. Build & Push de la imagen Docker
  build-and-push:
    name: Build & Push Docker image 
    needs: lint #correr solo si lint pasó sin errores
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code #clonar otra vez el repositorio (cada job tiene workspace limpio)
        uses: actions/checkout@v3

      - name: Log in to GHCR #autenticación en GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}       # el usuario de GitHub
          password: ${{ secrets.GITHUB_TOKEN }} # token automático

      - name: Build and push #construir la imagen y subir al registry
        uses: docker/build-push-action@v4
        with:
          context: .                          # contexto de build: root del repo
          push: true                         # sube la imagen tras build
          tags: ghcr.io/${{ github.repository }}:latest # etiqueta: ghcr.io/<usuario>/<repo>:latest